#include<stdio.h>
#include<stdlib.h>
#include<dos.h>
#include<string.h>
#include<conio.h>
/**
每次打开学生信息管理系统，请首先选择加载记录选项，此操作用于将磁盘文件中的学生信息加载进内存，以便于添加、删除、查找等功能 
*/
struct student{
	int id;
	char name[15];
	char sex[5];
	int age;
	double score[3];
	double sum;
	double ave;
};
typedef struct node{
	struct student data;
	struct node *next;
}Node,*link;
int menu_select()
{
	int i;
	printf("\n\n\t *****************学生信息管理系统*****************\n");
	printf("\t|*                 1.添加学生信息                 *|\n");
	printf("\t|*                 2.删除学生信息                 *|\n");
	printf("\t|*                 3.显示学生信息                 *|\n");
	printf("\t|*                 4.查找学生信息                 *|\n");
	printf("\t|*                 5.保存记录                     *|\n");
	printf("\t|*                 6.加载记录                     *|\n");
	printf("\t|*                 7.退出                         *|\n");
	printf("\t **************************************************\n");
	do
	{
		printf("\n\t请输入下一步操作：");
		scanf("%d",&i); 
	} while(i<=0||i>7);
	return i;
}
void display(link p)
{
	printf("姓名：%s\t性别：%s\t年龄：%d\n",p->data.name,p->data.sex,p->data.age);
	printf("语文：%3.f 数学：%3.lf 英语：%3.lf\n",p->data.score[0],p->data.score[1],p->data.score[2]);
	printf("平均成绩：%4.lf  总成绩：%4.lf\n",p->data.ave,p->data.sum);
	printf("************************************\n");
}
void change(link l)
{
	
} 
void search(link l)
{
	printf("请输入查询的学号：");
	int sid;
	scanf("%d",&sid);
	Node *p;
	p=l->next;
	while(p)
	{
		if(p->data.id==sid)
		{
			display(p);
			break;
		}
		p=p->next;
	}
	if(p==NULL)
		printf("该学生信息不存在！\n");
	printf("按任意键返回菜单...");
	getch();
}
void input(link l)//插入学生信息 
{
	int i,k;
	Node *p,*q;//p指针指向插入结点，q指针指向表尾结点 
	while(1)
	{
		p=(Node*)malloc(sizeof(Node));
		if(!p)
		{
			printf("内存分配失败！");
			return;
		}
		printf("请输入学号：");
		scanf("%d",&p->data.id);
		if(p->data.id==0)
			break;
		for(q=l;q->next!=NULL;q=q->next)
		{
			if(q->data.id==p->data.id)
			{
				printf("学号已存在，请重新输入：");
				scanf("%d",&p->data.id); 
			}
		} 
		printf("请输入姓名：");
		scanf("%s",p->data.name);
		printf("请输入性别：");
		scanf("%s",p->data.sex);
		printf("请输入年龄:");
		scanf("%d",&p->data.age);
		printf("请分别输入语文成绩，数学成绩，英语成绩:");
		scanf("%lf %lf %lf",&p->data.score[0],&p->data.score[1],&p->data.score[2]);
		p->data.sum=p->data.score[0]+p->data.score[1]+p->data.score[2];
		p->data.ave=(p->data.score[0]+p->data.score[0]+p->data.score[0])/3;
		p->next=NULL;
		q->next=p;
		q=p;
		printf("输入1继续，输入0退回主菜单...");
		scanf("%d",&k);
		if(k==0)
			break;
	}
}
void load(link l)
{
	Node *p,*r;
	FILE *fp;
	l->next=NULL;
	r=l;
	if((fp=fopen("D:\\studentlist.txt","rb"))==NULL)
	{
		printf("无法打开文件！");
		exit(1);
	}
	printf("\n加载信息中...");
	while(!feof(fp))
	{
		p=(Node*)malloc(sizeof(Node));
		if(!p)
		{
			printf("内存分配失败！");
			return;
		}
		if(fread(p,sizeof(Node),1,fp)!=1)
			break;
		else
		{
			p->next=NULL;
			r->next=p;
			r=p;
		}
	}
	printf("加载成功！按任意键退回主菜单...\n");
	fclose(fp);
	getch();
}
void list(link l)//显示学生信息 
{
	Node *p;
	p=l->next;
	while(p)
	{
		display(p);
		p=p->next;
	}
	printf("读取完毕，按任意键退回主菜单...");
	getch();
}

void del(link l)
{
	int num;
	Node *p,*q;
	q=l;//指向头结点 
	p=q->next;
	printf("请输入学生学号：");
	scanf("%d",&num);
	while(p)
	{
		if(p->data.id==num)
		{
			q->next=p->next;
			free(p);
			printf("删除成功！\n");
			break;
		}
		else
		{
			q=p;
			p=q->next;
		}
	}
	if(p==NULL)
		printf("该学生信息不存在！");
	printf("按任意键退回主菜单...");
	getch();
}
void save(link l)//保存学生信息 
{
	Node *p;
	FILE *fp;//指向文件的指针 
	p=l->next;//指向的是头结点的下一个结点 
	if((fp=fopen("D:\\studentlist.txt","wb"))==NULL)
	{
		printf("无法打开文件");
		exit(1);
	}
	printf("\n存储信息中\n");
	while(p)
	{
		fwrite(p,sizeof(Node),1,fp);
		p=p->next;
	}
	fclose(fp);
	printf("保存成功！按任意键退回主菜单...\n");
	getch();
}
int main()
{
	link l;
	l=(Node*)malloc(sizeof(Node));
	if(!l)
	{
		printf("\n内存分配失败");
	}
	l->next=NULL;
	system("color 0A");	
	while(1)
	{
		system("cls");
		switch(menu_select())
		{
			case 1:
				input(l);
				break;
			case 2:
				del(l);
				break;
			case 3:
				list(l);
				break;
			case 4:
				search(l);
				break;
			case 5:
				save(l);
				break;
			case 6:
				load(l);
				break;
			case 7:
				exit(0);
				break;
		}
	}
	return 0;
}

